```txt
# **Sands of Duat – Claude Code Master Prompt**

> **Cole este arquivo completo no Claude Code (ou Cursor) sempre que quiser inicializar o projeto do zero.**  
> Neste prompt, substituímos o nome do projeto por **Sands of Duat**.

---

## 0. Sugestões de Nomes
1. **Anubis Reborn**  
2. **Sands of Duat**  
3. **Halls of Osiris**  
4. **Pharaoh’s Cycle**  
5. **Blade of Khepri**  
6. **Eternal Scarab**  
7. **Wrath of Ra**  
8. **Abyss of Ammit**  

Escolha um ou use como inspiração; o prompt continuará funcionando mesmo se renomear a pasta-raiz.

## 1. Visão do Jogo e Mecânicas Principais
* **Gênero / Referência:** Roguelike action hack-&-slash estilo *Hades* – porém com temática **mitologia egípcia**.  
* **Plataforma-alvo:** PC (16:9 + ultrawide 3440×1440 UWQHD).

### 1.1 Loop de Jogo & Hub (Lobby)
- **Zona Inicial (Hub):** semelhante ao “Hall de Styx” do Hades. Aqui o jogador:
  - Escolhe armas e oferece artefatos (boons) em altares.
  - Interage com NPCs para obter lore e upgrades (espelho de Nyx, Mercador de preciosidades).
  - Gerencia deck de artefatos, verifica progressão e acessa desafios pendentes.
- **Transição para Arena:** ao iniciar corrida, entra em portal que carrega salas procedurais.

### 1.2 Arenas Procedurais
- **Estrutura:** corredores e salas de combate, tesouros, mini-bosses ou desafios.  
- **Sala básica:** retangular, portas em até 4 direções, spawn de inimigos conforme “nível de ameaça”.  
- **Geração:** mix de prefabs de salas, combinadas aleatoriamente.  
- **Encounters:** escaravelhos gigantes, puzzles, plataformas.  
- **Checkpoints:** fogões sagrados entre andares para restaurar vida e salvar artefatos.

### 1.3 Mecânicas de Armamento e Upgrades
- **Armas principais:** espadas curtas, lanças, cajados – ataques leves e pesados.  
- **Boons Divinos:** efeitos únicos (fogo, gelo, veneno) em altares ou derrotas de mini-bosses.  
- **Árvore de Poder:** troque gemas/almas por buffs permanentes (vida, novas habilidades).  
- **Habilidades:** pontos ganhos por run, investidos em passivas (velocidade, crítico) e ativáveis (dash, escudo).  
- **Artefatos de Equipe:** itens únicos que alteram armas (ricochete, explosões).

## 2. Stack & Ambiente
| Componente   | Versão / Requisito                                                                 |
|--------------|-------------------------------------------------------------------------------------|
| Python       | 3.13 (venv `.venv313`)                                                              |
| Engine       | Pygame 2.6 + camada ECS custom                                                      |
| GPU          | RTX 5070 (CUDA 12.8)                                                                |
| DL libs      | PyTorch 2.3.0.dev20250802+cu128, TorchVision 0.18.0.dev20250802+cu128, TorchAudio 2.3.0.dev20250802+cu128 |
| Diffusers    | ≥ 0.29.0                                                                            |
| MCP SDK      | `mcp>=0.5`                                                                          |
| IDE          | Claude Desktop / Cursor (com suporte MCP)                                           |

> **Nota:** use o índice nightly para cu128:  
> `pip install --index-url https://download.pytorch.org/whl/nightly/cu128 --extra-index-url https://pypi.org/simple torch torchvision torchaudio`

### Setup Windows
```

python -m venv .venv313 && .venv313\Scripts\activate
pip install --upgrade pip
pip install -r requirements.txt

```

## 3. Estrutura de Pastas
```

SandsOfDuat/
├─ assets/
│  ├─ generated/        # output SDXL
│  └─ raw/              # artes originais
├─ src/
│  ├─ ecs/              # sistemas & componentes
│  ├─ scenes/
│  ├─ ui/
│  └─ game.py           # entry-point
├─ tools/
│  ├─ pygame\_mcp.py
│  └─ sdxl\_mcp.py
├─ tests/
├─ requirements.txt
└─ README.md

```

## 4. Servidores MCP

### 4.1 MCPs Custom para Este Projeto
- **Pygame-MCP** (`tools/pygame_mcp.py`):
  - `run_game(entry)` — executa o jogo e captura logs.
  - `profile_fps(seconds)` — mede FPS para profiling.
  - `open_file(path)`, `write_file(path, content)` — leitura/escrita de código/assets.
- **SDXL-MCP** (`tools/sdxl_mcp.py`):
  - `text2img(...)`, `img2img(...)`, `sprite_sheet(...)`, `palette_reduce(...)`.

### 4.2 Outros MCPs Recomendados
- **FS-MCP:** manipulação de arquivos (copy/move/delete/list/read/write).  
- **Shell-MCP:** execução de comandos shell (build, lint, testes).  
- **GitHub-MCP:** automação GitHub (branches, PRs, merges).  
- **Blender-MCP:** controla o Blender para modelagem e baking.  
- **Godot-MCP:** integra com Godot Engine (editor, GDScript).  
- **ComfyUI-MCP:** pipelines visuais no ComfyUI.  
- **ControlNet-MCP:** consistência de poses/profundidade via ControlNet.  
- **MIDI-MCP:** gera e toca MIDI para protótipos de áudio.  
- **Test-MCP:** executa testes unitários e linters, gera relatórios.

### 4.3 Como Escolher
1. **Escopo:** use só o que agrega valor.  
2. **Segurança:** restrinja permissões/whitelists.  
3. **Performance:** prefira chamadas em lote.  
4. **Manutenibilidade:** escolha MCPs com docs e comunidade.

## 5. Dependências (`requirements.txt`)
```

pygame==2.6.1
mcp>=0.5

# PyTorch + CUDA 12.8 (nightly cu128)

torch==2.3.0.dev20250802+cu128 ; sys\_platform=="win32"
torchvision==0.18.0.dev20250802+cu128 ; sys\_platform=="win32"
torchaudio==2.3.0.dev20250802+cu128 ; sys\_platform=="win32"

# Geração de imagens

diffusers>=0.29.0
transformers>=4.43.0
accelerate>=0.30
safetensors
pillow
opencv-python-headless
numpy
xformers ; extra=="cuda"

````

## 6. Guia de Arte & Animação
* **Estilo:** alto contraste, tons areia-obsidiana, iluminação dourada.  
* **Spritesheets:** 4×4 frames, 512 px, PNG transparente.  
* **Workflow:** `sprite_sheet` → `palette_reduce`.  
* **Personagens:**  
  1. Guerreiro de Anúbis (idle, walk, attack-light/heavy).  
  2. Soldado Escaravelho.  
  3. Guardião Múmia.

### 6.1 Workflow Avançado de Assets
1. **Prompt Base**: “guerreiro Anúbis, armadura dourada, estilo Hades…”  
2. **Geração**: `sprite_sheet` no SDXL-MCP.  
3. **Inpainting/Depth**: ControlNet + MiDaS.  
4. **Palette Reduce**: `palette_reduce`.  
5. **Upscale**: Real-ESRGAN 2×, GFPGAN.  
6. **Interpolação**: RIFE/Dain-NCNN.  
7. **Import**: verificar hitboxes no Pygame.

## 7. Convenções de Código
* ECS via `@dataclass`.  
* `mypy --strict`.  
* ruff + black (100 col).  
* Conventional Commits.

## 8. Detalhamento de Sprints (Passo a Passo)

### Sprint 0 – Setup (1 semana)
- Dia 1: Criar repo GitHub `SandsOfDuat`, clonar, configurar venv e instalar deps.  
- Dia 2: Criar estruturas de pastas, boilerplate `game.py` e `README.md`.  
- Dia 3: Implementar `pygame_mcp.py` e `sdxl_mcp.py`.  
- Dia 4: Registrar MCPs no config, testar `run_game()` e `text2img()`.  
- Dia 5: Configurar GitHub Actions (ruff, black, mypy, pytest).  
- **Entrega:** PR de setup.

### Sprint 1 – Personagem Base (1 semana)
- Dia 1: Definir `Transform`, `SpriteRenderer`, `InputController`.  
- Dia 2: Carregar/renderizar spritesheet idle via MCP.  
- Dia 3: Movimentação e animação de walk cycle.  
- Dia 4: Sistema de câmera e resolução.  
- Dia 5: `profile_fps(10)` e otimização.

### Sprint 2 – Combate & Inimigos (2 semanas)
#### Semana 1
- Dia 1: AttackSystem (leve/pesado).  
- Dia 2: Hitboxes e `HealthComponent`.  
- Dia 3: Gerar sprites de ataque via MCP.  
- Dia 4: `ParticleSystem` para efeitos.  
- Dia 5: Testar combate vs dummy.

#### Semana 2
- Dia 1: IA do Soldado Escaravelho.  
- Dia 2: Sonoplastia via AudioAgent.  
- Dia 3: Balanceamento e QAAgent.  
- Dia 4: Testes pytest.  
- Dia 5: Merge de PR.

### Sprint 3 – Deck & Itens (2 semanas)
#### Semana 1
- Dia 1: `ArtifactComponent`.  
- Dia 2: UI de seleção no Hub.  
- Dia 3: Conectar buffs ao `StatSystem`.  
- Dia 4: Gerar ícones via `text2img`.  
- Dia 5: Testes de integração.

#### Semana 2
- Dia 1: Drop de artefatos.  
- Dia 2: Tela de inventário.  
- Dia 3: DocAgent para APIs.  
- Dia 4: QA fluxo de deck.  
- Dia 5: Feedback de arte.

### Sprint 4 – Boss & Progressão (2 semanas)
#### Semana 1
- Dia 1: Mecânicas do Guardião Múmia.  
- Dia 2: Gerar spritesheets de boss.  
- Dia 3: Implementar `BossSystem`.  
- Dia 4: Checkpoints sagrados.  
- Dia 5: Testar batalha.

#### Semana 2
- Dia 1: Árvores permanentes (Espelho de Nyx).  
- Dia 2: Integração com Hub.  
- Dia 3: DocAgent para progressão.  
- Dia 4: QA completa.  
- Dia 5: Merge final.

### Sprint 5 – Polimento (1 semana)
- Dia 1: Menu principal/config.  
- Dia 2: Trilha sonora e mixagem.  
- Dia 3: Otimizações (batch, pooling).  
- Dia 4: Teste completo e correções.  
- Dia 5: Build de release e arte do launcher.

## 9. Exemplos de Prompt
- `sprite_sheet("guerreiro anúbis idle dramatic lighting", cols=4, rows=4, size=512, seed=42)`  
- `Abra src/ecs/movement.py, troque para vetor numpy e teste FPS.`  
- `profile_fps(10); se <60, proponha otimizações.`

## 10. Segurança & Performance
- MCPs restritos a `src/`, `assets/`, `tools/`.  
- Torch autocast + `enable_vae_slicing`.  
- Timeout de 120 s por ferramenta.

## 11. Blueprint de **Agentes Claude**
| Codename          | Objetivo                                         | Ferramentas MCP                          | Prompt Base                                        |
|-------------------|--------------------------------------------------|------------------------------------------|----------------------------------------------------|
| AssetGenAgent     | Gerar spritesheets e upscales                    | `sdxl`                                   | "Você é artista digital egípcio… use sprite_sheet e palette_reduce." |
| LevelGenAgent     | Gerar arenas procedurais                         | `pygame` (`open_file`, `write_file`)     | "Você cria layouts de arena balanceados…"         |
| CodeRefactorAgent | Refatorar e otimizar sistemas ECS                | `pygame` + `profile_fps`                 | "Você é engenheiro de performance… Profile_fps(10)." |
| QAAgent           | Rodar pytest & mypy, reportar resultados         | `test_mcp`                               | "Você garante que os testes passem…"              |
| StoryAgent        | Criar lore, diálogos e roteiros                  | Nenhum (texto puro)                      | "Você é escritor de mitologia egípcia…"           |
| AudioAgent        | Produzir SFX/música via TTS/VST CLI              | `shell_mcp`                              | "Você gera SFX egípcios… exporta WAV."            |
| CI/CD Agent       | Configurar CI/CD (Actions, lint, build)          | `git_mcp`, `test_mcp`                    | "Você escreve workflow YAML para pipeline…"       |
| DocAgent          | Atualizar docs (README, wiki, APIs)              | `fs_mcp`                                 | "Você documenta APIs e gameplay…"                 |

```jsonc
{
  "agents": {
    "asset":   {"role": "AssetGenAgent",    "max_turns": 6},
    "level":   {"role": "LevelGenAgent",    "max_turns": 4},
    "code":    {"role": "CodeRefactorAgent","max_turns": 6},
    "story":   {"role": "StoryAgent",       "max_turns": 3},
    "audio":   {"role": "AudioAgent",       "max_turns": 3},
    "qa":      {"role": "QAAgent",          "max_turns": 4},
    "ci":      {"role": "CI/CD Agent",      "max_turns": 2},
    "doc":     {"role": "DocAgent",         "max_turns": 2}
  },
  "workflow": ["asset","level","code","story","audio","qa","ci","doc"]
}
````

## 12. Instruções Específicas para Claude Code

* **Contexto:** use este prompt como **system prompt**; não faça perguntas de esclarecimento.
* **Ferramentas MCP:** invoque diretamente (ex.: **run\_game()**, **sprite\_sheet(...)**).
* **Formato:** sempre gere **PATCH** (diff unificado) e abra **PR** com Conventional Commit.
* **Branches/PRs:** use **CI/CD Agent** para criar branches (`feature/...`) e merges.
* **Fluxo Agentes:** siga sequência, notifique o próximo ao concluir.
* **Revisão:** após patch, execute `profile_fps`, `mypy`, `pytest` e envie ao **QAAgent**.
* **Docs:** atualize **DocAgent** sempre que mudar ECS ou loot.

## 13. Funções Utilitárias Disponíveis

| Ferramenta | Descrição                         | Exemplo                         |
| ---------- | --------------------------------- | ------------------------------- |
| shell\_mcp | Executar comandos (build, lint)   | `shell_mcp.run("ruff src/")`    |
| git\_mcp   | Versionamento (branch, PR, merge) | `git_mcp.create_branch("feat")` |
| test\_mcp  | Rodar testes e linters            | `test_mcp.run_tests()`          |
| fs\_mcp    | Ler/gravar arquivos               | `fs_mcp.read("src/game.py")`    |

### Boas Práticas de Prompt

1. Intenção em até 2 frases.
2. Confirme pré-condições (assets, branches).
3. Comece deltas com **PATCH**, depois **PR**.

## 14. Mais sobre Servidores MCP

* FS-MCP, Shell-MCP, GitHub-MCP, Blender-MCP, Godot-MCP, ComfyUI-MCP, ControlNet-MCP, MIDI-MCP, Test-MCP.
* Cada um com whitelists configuráveis de pastas/comandos.

*Senebty – que os deuses favoreçam seu código!*\`\`\`

---

Você pode salvar este texto como `SandsOfDuat_Prompt.txt` e colar diretamente no Claude Code/Cursor.
